// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Automatically categorize transactions using AI.
 *
 * - categorizeTransaction - A function that handles the transaction categorization process.
 * - CategorizeTransactionInput - The input type for the categorizeTransaction function.
 * - CategorizeTransactionOutput - The return type for the categorizeTransaction function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CategorizeTransactionInputSchema = z.object({
  transactionDescription: z
    .string()
    .describe('The description of the transaction to categorize.'),
  previousCategories: z
    .array(z.string())
    .optional()
    .describe('A list of previous categories the user has used.'),
});
export type CategorizeTransactionInput = z.infer<typeof CategorizeTransactionInputSchema>;

const CategorizeTransactionOutputSchema = z.object({
  category: z.string().describe('The predicted category for the transaction.'),
  confidence: z
    .number()
    .min(0)
    .max(1)
    .describe('The confidence level of the categorization, from 0 to 1.'),
});
export type CategorizeTransactionOutput = z.infer<typeof CategorizeTransactionOutputSchema>;

export async function categorizeTransaction(
  input: CategorizeTransactionInput
): Promise<CategorizeTransactionOutput> {
  return categorizeTransactionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'categorizeTransactionPrompt',
  input: {schema: CategorizeTransactionInputSchema},
  output: {schema: CategorizeTransactionOutputSchema},
  prompt: `You are a personal finance expert. Your goal is to categorize user transactions based on their description.

Transaction Description: {{{transactionDescription}}}

{% if previousCategories %}
Here are some categories the user has used before:
{{#each previousCategories}}
  - {{this}}
{{/each}}
{% endif %}

Respond with the best category for this transaction and a confidence level between 0 and 1.

{{output}}
`,
});

const categorizeTransactionFlow = ai.defineFlow(
  {
    name: 'categorizeTransactionFlow',
    inputSchema: CategorizeTransactionInputSchema,
    outputSchema: CategorizeTransactionOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
